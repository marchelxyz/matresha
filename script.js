// Telegram Web App initialization
const tg = window.Telegram.WebApp;

// DOM elements
const navItems = document.querySelectorAll('.nav-item');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const charCount = document.getElementById('charCount');
const loadingOverlay = document.getElementById('loadingOverlay');
const userName = document.getElementById('userName');

// State
let currentSection = 'operations';
let isProcessing = false;

// Initialize the app
function initApp() {
    // Configure Telegram Web App
    tg.ready();
    tg.expand();
    
    // Set user info
    const user = tg.initDataUnsafe?.user;
    if (user) {
        userName.textContent = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    
    // Set theme
    document.body.style.backgroundColor = tg.themeParams.bg_color || '#ffffff';
    document.body.style.color = tg.themeParams.text_color || '#000000';
    
    // Setup event listeners
    setupEventListeners();
    
    // Show welcome message
    showWelcomeMessage();
}

// Setup event listeners
function setupEventListeners() {
    // Navigation
    navItems.forEach(item => {
        item.addEventListener('click', () => {
            const section = item.dataset.section;
            switchSection(section);
        });
    });
    
    // Message input
    messageInput.addEventListener('input', handleInputChange);
    messageInput.addEventListener('keydown', handleKeyDown);
    
    // Send button
    sendButton.addEventListener('click', sendMessage);
    
    // Auto-resize textarea
    messageInput.addEventListener('input', autoResizeTextarea);
}

// Switch between sections
function switchSection(section) {
    currentSection = section;
    
    // Update navigation
    navItems.forEach(item => {
        item.classList.toggle('active', item.dataset.section === section);
    });
    
    // Show section-specific welcome message
    showSectionWelcome(section);
}

// Show section-specific welcome message
function showSectionWelcome(section) {
    const messages = {
        operations: {
            title: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üìä',
            description: '–ê–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, KPI, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞.',
            examples: [
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª',
                '–ö–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞ –ø—Ä–∏–±—ã–ª–∏?',
                '–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂'
            ]
        },
        marketing: {
            title: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ —Ä–µ–∫–ª–∞–º–∞ üìà',
            description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.',
            examples: [
                '–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç',
                '–°–æ–∑–¥–∞–π –∫—Ä–µ–∞—Ç–∏–≤—ã –¥–ª—è Instagram',
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–≤–µ—Ä—Å–∏—é —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π'
            ]
        },
        accounting: {
            title: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –∏ —Ñ–∏–Ω–∞–Ω—Å—ã üí∞',
            description: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã, –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏, —Ä–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤, –≤–µ–¥–µ–Ω–∏–µ —É—á–µ—Ç–∞ –ø–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.',
            examples: [
                '–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—è—Ö –∏ —É–±—ã—Ç–∫–∞—Ö',
                '–†–∞—Å—Å—á–∏—Ç–∞–π –ù–î–° –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª',
                '–°–æ–∑–¥–∞–π –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é –ø–æ –£–°–ù'
            ]
        },
        legal: {
            title: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª ‚öñÔ∏è',
            description: '–ü—Ä–∞–≤–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —á–µ–∫-–ª–∏—Å—Ç—ã –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –±–∏–∑–Ω–µ—Å–∞.',
            examples: [
                '–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º',
                '–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û?',
                '–°–æ–∑–¥–∞–π —á–µ–∫-–ª–∏—Å—Ç –ø–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É'
            ]
        }
    };
    
    const sectionInfo = messages[section];
    if (!sectionInfo) return;
    
    const welcomeHtml = `
        <div class="message bot-message">
            <div class="message-content">
                <h3>${sectionInfo.title}</h3>
                <p>${sectionInfo.description}</p>
                <p><strong>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</strong></p>
                <ul>
                    ${sectionInfo.examples.map(example => `<li>${example}</li>`).join('')}
                </ul>
                <p>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!</p>
            </div>
        </div>
    `;
    
    // Clear previous messages and add new welcome
    chatMessages.innerHTML = welcomeHtml;
    scrollToBottom();
}

// Show initial welcome message
function showWelcomeMessage() {
    showSectionWelcome(currentSection);
}

// Handle input changes
function handleInputChange() {
    const text = messageInput.value;
    charCount.textContent = `${text.length}/4000`;
    
    // Enable/disable send button
    sendButton.disabled = text.trim().length === 0 || isProcessing;
}

// Handle key down events
function handleKeyDown(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

// Auto-resize textarea
function autoResizeTextarea() {
    messageInput.style.height = 'auto';
    messageInput.style.height = Math.min(messageInput.scrollHeight, 120) + 'px';
}

// Send message
async function sendMessage() {
    const text = messageInput.value.trim();
    if (!text || isProcessing) return;
    
    // Add user message
    addMessage(text, 'user');
    
    // Clear input
    messageInput.value = '';
    autoResizeTextarea();
    handleInputChange();
    
    // Show loading
    showLoading(true);
    
    try {
        // Simulate API call
        const response = await simulateAIResponse(text, currentSection);
        addMessage(response, 'bot');
    } catch (error) {
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'bot');
    } finally {
        showLoading(false);
    }
}

// Add message to chat
function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    
    // Check if text contains markdown-like formatting
    if (text.includes('**') || text.includes('‚Ä¢') || text.includes('\n\n')) {
        contentDiv.innerHTML = formatMessage(text);
    } else {
        contentDiv.textContent = text;
    }
    
    messageDiv.appendChild(contentDiv);
    chatMessages.appendChild(messageDiv);
    
    scrollToBottom();
}

// Format message with basic markdown
function formatMessage(text) {
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\n\n/g, '</p><p>')
        .replace(/\n/g, '<br>')
        .replace(/^/, '<p>')
        .replace(/$/, '</p>');
}

// Scroll to bottom
function scrollToBottom() {
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Show/hide loading
function showLoading(show) {
    isProcessing = show;
    loadingOverlay.classList.toggle('show', show);
    sendButton.disabled = show || messageInput.value.trim().length === 0;
}

// Simulate AI response based on section
async function simulateAIResponse(userMessage, section) {
    try {
        // Try to use API first
        const response = await api.sendMessage(userMessage, section, {
            user: tg.initDataUnsafe?.user,
            timestamp: new Date().toISOString()
        });
        
        if (response.success) {
            return response.data.response;
        }
    } catch (error) {
        console.log('API not available, using mock response');
    }
    
    // Fallback to mock responses
    const responses = {
        operations: [
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...",
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:",
            "–í–∞—à–∏ KPI –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:",
            "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é:"
        ],
        marketing: [
            "–°–æ–∑–¥–∞—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...",
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:",
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:"
        ],
        accounting: [
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞...",
            "–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –Ω–∞–ª–æ–≥–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ù–ö –†–§...",
            "–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏:",
            "–í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:"
        ],
        legal: [
            "–°–æ—Å—Ç–∞–≤–ª—è—é —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...",
            "–í–æ—Ç —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:",
            "–°–æ–∑–¥–∞—é —á–µ–∫-–ª–∏—Å—Ç –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:"
        ]
    };
    
    const sectionResponses = responses[section] || responses.operations;
    const randomResponse = sectionResponses[Math.floor(Math.random() * sectionResponses.length)];
    
    // Generate contextual response
    let response = randomResponse + "\n\n";
    
    if (section === 'operations') {
        response += "üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:**\n";
        response += "‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: 15.2% (—Ü–µ–ª—å: 18%)\n";
        response += "‚Ä¢ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å: 45 –¥–Ω–µ–π (—Ü–µ–ª—å: 30 –¥–Ω–µ–π)\n";
        response += "‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: 22% (—Ö–æ—Ä–æ—à–æ)\n\n";
        response += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n";
        response += "1. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏\n";
        response += "2. –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–¥–∞–∂\n";
        response += "3. –í–Ω–µ–¥—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —É—á–µ—Ç–∞";
    } else if (section === 'marketing') {
        response += "üìà **–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:**\n";
        response += "‚Ä¢ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: 25-45 –ª–µ—Ç, —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥\n";
        response += "‚Ä¢ –ö–∞–Ω–∞–ª—ã: –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç, Google Ads, —Å–æ—Ü—Å–µ—Ç–∏\n";
        response += "‚Ä¢ –ë—é–¥–∂–µ—Ç: 50,000‚ÇΩ/–º–µ—Å—è—Ü\n\n";
        response += "üé® **–ö—Ä–µ–∞—Ç–∏–≤—ã:**\n";
        response += "1. –í–∏–¥–µ–æ-—Ä–æ–ª–∏–∫ 15 —Å–µ–∫ –¥–ª—è Instagram\n";
        response += "2. –ë–∞–Ω–Ω–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã\n";
        response += "3. Email-—Ä–∞—Å—Å—ã–ª–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π";
    } else if (section === 'accounting') {
        response += "üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:**\n";
        response += "‚Ä¢ –í—ã—Ä—É—á–∫–∞: 2,500,000‚ÇΩ\n";
        response += "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: 1,800,000‚ÇΩ\n";
        response += "‚Ä¢ –ü—Ä–∏–±—ã–ª—å: 700,000‚ÇΩ\n\n";
        response += "üìã **–ù–∞–ª–æ–≥–∏ (–£–°–ù 6%):**\n";
        response += "‚Ä¢ –ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞: 2,500,000‚ÇΩ\n";
        response += "‚Ä¢ –°—É–º–º–∞ –Ω–∞–ª–æ–≥–∞: 150,000‚ÇΩ\n";
        response += "‚Ä¢ –ö –¥–æ–ø–ª–∞—Ç–µ: 150,000‚ÇΩ";
    } else if (section === 'legal') {
        response += "‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:**\n";
        response += "–î–û–ì–û–í–û–† –ü–û–°–¢–ê–í–ö–ò\n\n";
        response += "**–°—Ç–æ—Ä–æ–Ω—ã:**\n";
        response += "‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: [–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã]\n";
        response += "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: [–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞]\n\n";
        response += "**–ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞:**\n";
        response += "–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n";
        response += "**–£—Å–ª–æ–≤–∏—è:**\n";
        response += "‚Ä¢ –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏: 10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n";
        response += "‚Ä¢ –û–ø–ª–∞—Ç–∞: 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, 50% –ø–æ —Ñ–∞–∫—Ç—É\n";
        response += "‚Ä¢ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —Å–æ–≥–ª–∞—Å–Ω–æ –ì–ö –†–§";
    }
    
    return response;
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', initApp);